'.source.gfm':
  'API Create Route Documentation':
    'prefix': 'APICreateDoc'
    'body': """
    ### Create ${1:Whatever}

    **POST:**
    ```
    ${2:route}
    ```

    **Body:**
    ```json
    ${3:Request Body}
    ```

    **Response:**
    ```json
    ${4:Response Body}
    ```

    **Status Codes:**
    * `201` if successful
    * `400` if incorrect data provided
    * `409` if unique constraint violation
    """
  'API List Route Documentation':
    'prefix': 'APIListDoc'
    'body': """
    ### Get a list of ${1:Whatever}

    **GET:**
    ```
    ${2:route}
    ```

    **Query Parameters:**

    * ${3:query params}

    **Response:**
    ```json
    ${4:Response Body}
    ```

    **Status Codes:**
    * `200` if successful
    * `400` if invalid query parameters
    * `401` if invalid credentials
    """
  'API Single Route Document':
    'prefix': 'APISingleDoc'
    'body': """
    ### Get a ${1:Whatever}

    **GET:**
    ```
    ${2:route}
    ```

    **Response:**
    ```json
    ${3:Response Body}
    ```

    **Status Codes:**
    * `200` if successful
    * `401` if invalid credentials
    * `404` if does not exist
    """
  'API Update Route Document':
    'prefix': 'APIUpdateDoc'
    'body': """
    ### Update a ${1:Whatever}

    **PUT:**
    ```
    ${2:route}
    ```

    **Body:**
    ```json
    ${3:Request Body}
    ```

    **Response:**
    ```json
    ${4:Response Body}
    ```

    **Status Codes:**
    * `200` if successful
    * `400` if invalid data
    * `401` if invalid credentials
    * `404` if does not exist
    """
  'API Delete Route Document':
    'prefix': 'APIDeleteDoc'
    'body': """
    ### Delete a ${1:Whatever}

    **DELETE:**
    ```
    ${2:route}
    ```

    **Response:** None

    **Status Codes:**
    * `204` if successful
    * `401` if invalid credentials
    * `404` if does not exist
    """
'.source.python':
  'try/except':
    'prefix': 'try'
    'body': """
    try:
        ${1:something}
    except ${2:exception}:
        ${3:pass}
    """
  'Unittest Test Case':
    'prefix': 'TestCase'
    'body': """
    class ${1:Whatever}TestCase(${2:unittest.TestCase}):

        def setUp(self):
            super(${1:Whatever}TestCase, self).setUp()
    """
  'Unittest test method':
    'prefix': 'test'
    'body': """
    def test_${1:whatever}(self):
        ${2:pass}
    """
  'Falcon Collection Handler':
    'prefix': 'falcon_collection'
    'body': """
    class ${1:Whatever}Collection:

        def on_post(self, req, res):
            pass

        def on_get(self, req, res):
            pass
    """
  'Falcon Item Handler':
    'prefix': 'falcon_item'
    'body': """
    class ${1:Whatever}Item:

        def on_get(self, req, res, ${2:url_param}):
            pass

        def on_put(self, req, res, ${2:url_param}):
            pass

        def on_delete(self, req, res, ${3:url_param}):
            pass
    """
  'If main':
    'prefix': 'ifmain'
    'body': """
    def main():
        pass


    if __name__ == "__main__":
        main()
    """
'.source.js':
  'console.log':
    'prefix': 'log'
    'body': 'console.log(${1:whatever});'
  'if main':
    'prefix': 'ifmain'
    'body': """
    function main() {

    }


    if (require.main === module) {
        main();
    }
    """
  'module.exports':
    'prefix': 'exports'
    'body': 'var exports = module.exports = {};'
  'object':
    'prefix': 'object'
    'body': """
    var ${1:whatever} = {
        ${2:whateverProp}:
    };
    """
  'anon function':
    'prefix': 'anon'
    'body': """
    function (${1:params}) {
        ${2:stuff}
    }
    """
  'Mocha Describe':
    'prefix': 'desc'
    'body': """
    describe("${1:whatever}", function () {
        ${2:stuff}
    });
    """
  'Mocha It':
    'prefix': 'it'
    'body': """
    it("${1:whatever}", function (done) {
        ${2:stuff}
        done();
    });
    """
'.source.sql':
  'Create Table Template`':
    'prefix': 'CreateTbl'
    'body': """
    CREATE TABLE IF NOT EXISTS "${1:table_name}"
    (
        id          BIGSERIAL PRIMARY KEY,
        ${2:field_names}
    );
    """
  'Insert SP Template':
    'prefix': 'InsertSP'
    'body': """
    CREATE FUNCTION ${1:sp_whatever_insert}
    (
        ${2:params}
    )

    RETURNS TABLE
    (
        jdoc JSON
    ) AS

    \$\$
    BEGIN
        RETURN      QUERY
        WITH inserted AS (
            INSERT INTO     ${3:table_name}
                            (
                                ${4:field_names}
                            )
            VALUES          (
                                ${5:value_names}
                            )
            RETURNING       ${6:field_names}
        )
        SELECT      ROW_TO_JSON(inserted.*)
        FROM        inserted;
    END;
    \$\$

    LANGUAGE plpgsql;
    """
  'Update SP Template':
    'prefix': 'UpdateSP'
    'body': """
    CREATE FUNCTION ${1:sp_whatever_update}
    (
        ${2:params}
    )

    RETURNS TABLE
    (
        jdoc JSON
    ) AS

    \$\$
    BEGIN
        RETURN     QUERY
        WITH updated AS (
            UPDATE          ${3:table_name}
            SET             ${4:field_names}
            WHERE           ${5:field_names}
            RETURNING       ${6:field_names}
        )
        SELECT      ROW_TO_JSON(updated.*)
        FROM        updated;
    END;
    \$\$

    LANGUAGE plpgsql;
    """
  'List SP Template':
    'prefix': 'ListSP'
    'body': """
    CREATE FUNCTION ${1:sp_whatever_list}
    (
        ${2:params}
    )

    RETURNS TABLE
    (
        record_count INTEGER,
        jdoc JSON
    ) AS

    \$\$
    DECLARE     recordCount INTEGER;

    BEGIN
        SELECT      COUNT(*) INTO recordCount
        FROM        ${3:table_name}
        WHERE       ${4:field_names};

        RETURN      QUERY

        WITH result AS (
            SELECT          ${5:field_names}
            FROM            ${3:table_name}
            WHERE           ${6:field_names}
            ORDER BY        ${7:field_names}
            OFFSET          skip
            LIMIT           take
        )

        SELECT      recordCount,
                    JSON_AGG(result.*)
        FROM        result;
    END;
    \$\$

    LANGUAGE plpgsql;
    """
  'Select SP Template':
    'prefix': 'SelectSP'
    'body': """
    CREATE FUNCTION ${1:sp_whatever_select}
    (
        ${2:params}
    )

    RETURNS TABLE
    (
        jdoc JSON
    ) AS

    \$\$
    BEGIN
        RETURN      QUERY
        WITH result AS (
            SELECT      ${3:field_names}
            FROM        ${4:table_name}
            WHERE       ${5:field_names}
        )
        SELECT      ROW_TO_JSON(result.*)
        FROM        result;

    END;
    \$\$

    LANGUAGE plpgsql;
    """
  'Delete SP':
    'prefix': 'DeleteSP'
    'body': """
    CREATE FUNCTION ${1:sp_whatever_delete}
    (
        ${2:params}
    )

    RETURNS BOOLEAN AS

    \$\$
    BEGIN
        DELETE FROM     ${3:table_name}
        WHERE           ${4:field_names};
        RETURN          FOUND;
    END;
    \$\$

    LANGUAGE plpgsql;
    """
'.source.go':
  'HTTP Handler':
    'prefix': 'HttpHandler'
    'body': """
    func ${1:WhateverHandler}(w http.ResponseWriter, r *http.Request) error {
        return nil
    }
    """
  'Struct':
    'prefix': 'struct'
    'body': """
    type ${1:Whatever} struct {
        ${2:Prop} ${3:type} `${4:annotation}`
    }
    """
  'Go Check Test':
    'prefix': 'check'
    'body': """
    func (s *${1:TestSuite}) ${2:TestWhatever}(c *C) {
        ${3:DoSomething}
    }
    """
