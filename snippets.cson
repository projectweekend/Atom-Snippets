'.source.python':
  'try/except':
    'prefix': 'try'
    'body': """
    try:
        ${1:something}
    except ${2:exception}:
        ${3:pass}
    """
  'Unittest Test Case':
    'prefix': 'TestCase'
    'body': """
    class ${1:Whatever}TestCase(${2:unittest.TestCase}):

        def setUp(self):
            super(${1:Whatever}, self).setUp()
    """
  'Unittest test method':
    'prefix': 'test'
    'body': """
    def test_${1:whatever}(self):
        ${2:pass}
    """
  'Falcon Collection Handler':
    'prefix': 'falcon_collection'
    'body': """
    class ${1:Whatever}Collection(${2:object}):

        def on_post(self, req, res):
            pass

        def on_get(self, req, res):
            pass
    """
  'Falcon Item Handler':
    'prefix': 'falcon_item'
    'body': """
    class ${1:Whatever}Item(${2:object}):

        def on_get(self, req, res, ${3:url_param}):
            pass

        def on_put(self, req, res, ${3:url_param}):
            pass

        def on_delete(self, req, res, ${3:url_param}):
            pass
    """
  'If main':
    'prefix': 'ifmain'
    'body': """
    if __name__ == "__main__":
        main()
    """
'.source.js':
  'console.log':
    'prefix': 'log'
    'body': 'console.log(${1:whatever});'
  'object':
    'prefix': 'object'
    'body': """
    var ${1:whatever} = {
        ${2:whateverProp}:
    };
    """
  'anon function':
    'prefix': 'anon'
    'body': """
    function (${1:params}) {
        ${2:stuff}
    }
    """
  'Mocha Describe':
    'prefix': 'desc'
    'body': """
    describe("${1:whatever}", function () {
        ${2:stuff}
    });
    """
  'Mocha It':
    'prefix': 'it'
    'body': """
    it("${1:whatever}", function (done) {
        ${2:stuff}
        done();
    });
    """
  'Node Sub Class':
    'prefix': 'subClass'
    'body': """
    function ${1:ChildClass} () {
        ${2:ParentClass}.call(this);
    }
    util.inherits(${1:ChildClass}, ${2:ParentClass});
    """
'.source.sql':
  'Insert SP Template':
    'prefix': 'InsertSP'
    'body': """
    CREATE FUNCTION ${1:sp_whatever_insert}
    (
        ${2:params}
    )

    RETURNS TABLE
    (
        jdoc JSON
    ) AS

    \$\$
    BEGIN
        RETURN      QUERY
        WITH i AS (
            INSERT INTO     ${3:table_name}
                            (
                                ${4:field_names}
                            )
            VALUES          (
                                ${5:value_names}
                            )
            RETURNING       ${6:field_names}
        )
        SELECT      ROW_TO_JSON(i.*)
        FROM        i;
    END;
    \$\$

    LANGUAGE plpgsql;
    """
  'Update SP Template':
    'prefix': 'UpdateSP'
    'body': """
    CREATE FUNCTION ${1:sp_whatever_update}
    (
        ${2:params}
    )

    RETURNS TABLE
    (
        jdoc JSON
    ) AS

    \$\$
    BEGIN
        RETURN     QUERY
        WITH i AS (
            UPDATE          ${3:table_name}
            SET             ${4:field_names}
            WHERE           ${5:field_names}
            RETURNING       ${6:field_names}
        )
        SELECT      ROW_TO_JSON(i.*)
        FROM        i;
    END;
    \$\$

    LANGUAGE plpgsql;
    """
  'List SP Template':
    'prefix': 'ListSP'
    'body': """
    CREATE FUNCTION ${1:sp_whatever_list}
    (
        ${2:params}
    )

    RETURNS TABLE
    (
        record_count INTEGER,
        jdoc JSON
    ) AS

    \$\$
    DECLARE     recordCount INTEGER;

    BEGIN
        SELECT      COUNT(*) INTO recordCount
        FROM        ${3:table_name}
        WHERE       ${4:field_names};

        RETURN      QUERY

        WITH i AS (
            SELECT          ${5:field_names}
            FROM            ${3:table_name}
            WHERE           ${6:field_names}
            ORDER BY        ${7:field_names}
            OFFSET          skip
            LIMIT           take
        )

        SELECT      recordCount,
                    JSON_AGG(i.*)
        FROM        i;
    END;
    \$\$

    LANGUAGE plpgsql;
    """
  'Select SP Template':
    'prefix': 'SelectSP'
    'body': """
    CREATE FUNCTION ${1:sp_whatever_select}
    (
        ${2:params}
    )

    RETURNS TABLE
    (
        jdoc JSON
    ) AS

    \$\$
    BEGIN
        RETURN      QUERY
        WITH d AS (
            SELECT      ${3:field_names}
            FROM        ${4:table_name}
            WHERE       ${5:field_names}
        )
        SELECT      row_to_json(d.*)
        FROM        d;

    END;
    \$\$

    LANGUAGE plpgsql;
    """
  'Delete SP':
    'prefix': 'DeleteSP'
    'body': """
    CREATE FUNCTION ${1:sp_whatever_delete}
    (
        ${2:params}
    )

    RETURNS BOOLEAN AS

    \$\$
    BEGIN
        DELETE FROM     ${3:table_name}
        WHERE           ${4:field_names};
        RETURN          FOUND;
    END;
    \$\$

    LANGUAGE plpgsql;
    """
